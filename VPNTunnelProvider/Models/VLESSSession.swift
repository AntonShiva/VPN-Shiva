//
//  VLESSSession.swift
//  VPNTunnelProvider
//
//  Created by Anton Rasen on 30.01.2025.
//

import Foundation
import Network
import NetworkExtension
import Security

class VLESSSession {
    private var connection: NWConnection?
    private var wsConnection: WebSocketConnection?
    private let vlessVersion: UInt8 = 0
    private var packetTunnelFlow: NEPacketTunnelFlow?
    private var config: VLESSConfig?
    private var isRunning: Bool = false
    
    func initialize(withPacketFlow packetFlow: NEPacketTunnelFlow?) {
        self.packetTunnelFlow = packetFlow
    }
    
    func start(config: VLESSConfig) {
        self.config = config
        self.isRunning = true
        
        print("üöÄ –ó–∞–ø—É—Å–∫ VLESSSession")
        print("üìç –•–æ—Å—Ç: \(config.host):\(config.port)")
        print("üîë ID: \(config.id)")
        print("üîí Security: \(config.security ?? "none")")
        print("üåê Type: \(config.type)")
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TLS
        let tlsOptions = NWProtocolTLS.Options()
        
        if config.security == "tls" {
            print("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TLS...")
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            sec_protocol_options_set_verify_block(tlsOptions.securityProtocolOptions, { _, _, completionHandler in
                completionHandler(true)
            }, .main)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SNI –µ—Å–ª–∏ –µ—Å—Ç—å
            if let sni = config.sni {
                print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SNI: \(sni)")
                if let sniData = sni.data(using: .utf8) {
                    sniData.withUnsafeBytes { buffer in
                        guard let baseAddress = buffer.baseAddress else { return }
                        sec_protocol_options_set_tls_server_name(tlsOptions.securityProtocolOptions, baseAddress)
                    }
                }
            }
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket
        let wsOptions = NWProtocolWebSocket.Options()
        
        if let wsHost = config.wsHost {
            print("üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Ö–æ—Å—Ç–∞: \(wsHost)")
            let headers = [("Host", wsHost)]
            wsOptions.setAdditionalHeaders(headers)
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        let parameters = NWParameters(tls: tlsOptions, tcp: .init())
        parameters.defaultProtocolStack.applicationProtocols.insert(wsOptions, at: 0)
        
        // –°–æ–∑–¥–∞–µ–º endpoint
        let endpoint = NWEndpoint.hostPort(
            host: NWEndpoint.Host(config.host),
            port: NWEndpoint.Port(integerLiteral: UInt16(config.port))
        )
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        connection = NWConnection(to: endpoint, using: parameters)
        
        connection?.stateUpdateHandler = { [weak self] state in
            switch state {
            case .ready:
                print("‚úÖ TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                self?.startVLESSHandshake()
            case .preparing:
                print("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            case .waiting(let error):
                print("‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ: \(error)")
            case .failed(let error):
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: \(error)")
            case .cancelled:
                print("üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            default:
                print("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: \(state)")
            }
        }
        
        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        connection?.start(queue: .global())
    }
    private func startVLESSHandshake() {
        guard let config = config else { return }
        
        var handshake = Data()
        handshake.append(vlessVersion)
        
        // –î–æ–±–∞–≤–ª—è–µ–º UUID
        if let uuid = UUID(uuidString: config.id) {
            withUnsafeBytes(of: uuid.uuid) { buffer in
                handshake.append(contentsOf: buffer)
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É (TCP)
        handshake.append(0x01)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç
        if let hostData = config.host.data(using: .utf8) {
            handshake.append(UInt8(hostData.count))
            handshake.append(hostData)
        }
        handshake.append(UInt8(config.port >> 8))
        handshake.append(UInt8(config.port & 0xFF))
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ VLESS handshake (\(handshake.count) –±–∞–π—Ç)")
        
        connection?.send(content: handshake, completion: .contentProcessed { [weak self] error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ handshake: \(error)")
                return
            }
            print("‚úÖ VLESS handshake –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            self?.connection?.receive(minimumIncompleteLength: 1, maximumLength: 1024) { [weak self] content, _, isComplete, error in
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ handshake: \(error)")
                    return
                }
                
                if let responseData = content {
                    print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç handshake: \(responseData.count) –±–∞–π—Ç")
                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ handshake –Ω–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
                    self?.readPackets()
                }
            }
        })
    }

    private func handleIncomingData(_ data: Data) {
        guard data.count >= 1 else { return }
        
        print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: \(data.count) –±–∞–π—Ç")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç—É–Ω–Ω–µ–ª—å
        let success = packetTunnelFlow?.writePackets([data], withProtocols: [NSNumber(value: AF_INET)]) ?? false
        
        if !success {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç—É–Ω–Ω–µ–ª—å")
        } else {
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç—É–Ω–Ω–µ–ª—å")
        }
    }
    
    private func readPackets() {
        connection?.receive(minimumIncompleteLength: 1, maximumLength: 65536) { [weak self] content, _, isComplete, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: \(error)")
                return
            }
            
            if let data = content {
                self?.handleIncomingData(data)
            }
            
            if !isComplete && self?.isRunning == true {
                self?.readPackets()
            }
        }
    }
    


    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç—É–Ω–Ω–µ–ª—å
    func sendDataToTunnel(_ data: Data) {
        guard isRunning else {
            Logger.log("–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", type: .error)
            return
        }
        
        var packet = Data(capacity: data.count + 2) // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å
        packet.append(vlessVersion)
        packet.append(0x01) // TCP –∫–æ–º–∞–Ω–¥–∞
        packet.append(data)
        
        connection?.send(content: packet, completion: .contentProcessed { error in
            if let error = error {
                Logger.log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: \(error)", type: .error)
            }
        })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
    func stop() {
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VLESSSession")
        isRunning = false
        connection?.cancel()
        connection = nil
        wsConnection?.close()
        wsConnection = nil
    }
}
